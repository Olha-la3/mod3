# def all_variants(text):
#     length = len(text)
#     for start in range(length):
#         for end in range(start + 1, length + 1):
#             yield text[start:end]
#
# a = all_variants("abc")
# for i in a:
#     print(i)

def all_variants(text):
    n = len(text)
    # Генерируем все возможные индексы для подпоследовательностей
    for i in range(1 << n):  # 2^n возможных подпоследовательностей
        subseq = ''
        for j in range(n):
            # Проверяем, включен ли j-ый символ в текущую подпоследовательность
            if (i & (1 << j)):
                subseq += text[j]
        yield subseq  # Возвращаем сгенерированную подпоследовательность


# Пример использования функции
a = all_variants("abc")
for i in a:
    print(i)

# Объяснение кода:
#
#
# Функция all_variants принимает строку text.
#
# Мы определяем длину строки n.
#
# Для генерации всех возможных подпоследовательностей используется битовая арифметика. Суть в том, что для строки длиной n имеется 2^n различных комбинаций.
#
# Внешний цикл проходит по всем числам от 0 до 2^n - 1, причем каждое число представляется в двоичной системе, что позволяет определить, какие символы из строки должны быть включены в текущую подпоследовательность.
#
# Вложенный цикл проходит по каждому символу в строке и добавляет его к текущей подпоследовательности, если соответствующий бит в числе установлен.
#
# С помощью yield мы возвращаем каждую сгенерированную подпоследовательность при каждой итерации.
#
#
# Таким образом, при выполнении кода вы получите все возможные подпоследовательности строки "abc", включая пустую строку.